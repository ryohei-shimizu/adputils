#!/usr/bin/env ruby
require_relative 'lib/adp'
require 'optparse'
require 'date'

# 期限日が指定日数以内かどうかを判定。
#
# @param date [Date] チェックしたい期限日
# @param from [Date] 基準となる日。デフォルトでは実行日時。
# @param withinDays [Integer] 日数。デフォルトでは60日（約2ヶ月）
# @return [bool] `date` が `from` から `withinDays` 日以内なら false を返す。
def expires(date:, from: Date.today, withinDays: 60)
  diff = date - from
  diff.to_i < withinDays
end


params = ARGV.getopts('ft:', 'force', 'team:', 'expires-within-days:')
team = params['team'] || params['t']
force_repair = params['force'] || params['f']
expires_within_days = params['expires-within-days'].to_i || 60 # デフォルトでは60日以内に期限切れを迎えるものは更新するようにする。
profile_filter = ARGV

service = AdpService.new
client = service.create_client(team)

registed_device_ids = client.with_retry do
  client.devices.select{|d| d['deviceClass'] != 'tvOS'}.map {|d| d['deviceId'] }
end

registed_certificate_ids = {:dev => [], :prd => [], :inhouse => [], :adhoc => []}
Spaceship::Portal::Certificate.all.each do |c|
  if c.class == Spaceship::Portal::Certificate::Production
    registed_certificate_ids[:prd] << c.id
  elsif c.class == Spaceship::Portal::Certificate::InHouse
    registed_certificate_ids[:inhouse] << c.id
    registed_certificate_ids[:prd] << c.id
    registed_certificate_ids[:adhoc] << c.id
  elsif c.class == Spaceship::Portal::Certificate::AppleDistribution
    registed_certificate_ids[:prd] << c.id
    registed_certificate_ids[:adhoc] << c.id
  elsif c.class == Spaceship::Portal::Certificate::Development || c.class == Spaceship::Portal::Certificate::AppleDevelopment
    registed_certificate_ids[:dev] << c.id
  end
end

profiles = client.provisioning_profiles.select {|p| (profile_filter.length == 0) || profile_filter.any? {|v| v == p['name'] } }

profiles.each do |profile|
  if profile['type'] =~ /^tvOS/
    next
  end
  profile_id = profile['provisioningProfileId']
  detail = client.with_retry do
    client.provisioning_profile_details(provisioning_profile_id: profile_id)
  end
  name = detail['name']
  app_id = detail['appIdId']
  distribution_method = detail['distributionMethod']
  distribution_type = detail['distributionType']
  current_devices = detail['deviceIds'].sort
  current_certificates = detail['certificateIds'].sort

  devices = registed_device_ids.sort
  if distribution_method == 'store'
    if distribution_type == 'store'
      devices = []
    end
    certificates = registed_certificate_ids[:prd].sort
  elsif distribution_method == 'inhouse'
    if distribution_type == 'inhouse'
      devices = []
    end
    certificates = registed_certificate_ids[:inhouse].sort
  elsif  distribution_method == 'adhoc'
    certificates = registed_certificate_ids[:adhoc].sort
  else
    certificates = registed_certificate_ids[:dev].sort
  end

  date_expire = Date.parse(detail['dateExpire'])
  need_repair = (detail['status'] != 'Active') || expires(date: date_expire, withinDays: expires_within_days) || (certificates != current_certificates) || (devices != current_devices)
  unless force_repair || need_repair
    next
  end

  puts "repairing #{name}"
  client.with_retry do
    client.repair_provisioning_profile!(profile_id, name, distribution_method, app_id, certificates, devices)
  end
end
